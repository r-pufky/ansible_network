---
# yamllint disable rule:line-length
- name: 'Default | verify'
  hosts: 'all'
  gather_facts: false
  become: true
  tasks:
    - name: 'Default | verify | query /etc/resolv.conf'
      ansible.builtin.copy:
        src: '/etc/resolv.conf.ansible'
        remote_src: true
        dest: '/etc/resolv.conf'
        owner: 'root'
        group: 'root'
        mode: '0644'
      check_mode: true
      diff: true
      register: _test_network_resolv

    - name: 'Default | verify | assert expected /etc/resolv.conf'
      ansible.builtin.assert:
        that:
          - not _test_network_resolv.changed
        fail_msg: >
          /etc/resolv.conf is not in expected format.

    - name: 'Default | verify | query /etc/network/interfaces'
      ansible.builtin.copy:
        src: '/etc/network/interfaces.ansible'
        remote_src: true
        dest: '/etc/network/interfaces'
        owner: 'root'
        group: 'root'
        mode: '0644'
      check_mode: true
      diff: true
      register: _test_network_interfaces

    - name: 'Default | verify | assert expected /etc/network/interfaces'
      ansible.builtin.assert:
        that:
          - not _test_network_interfaces.changed
        fail_msg: >
          /etc/network/interfaces is not in expected format.

    - name: 'Default | verify | get TCP BBR status'
      ansible.builtin.command: 'sysctl --values net.ipv4.tcp_congestion_control'
      register: _test_network_tcp_bbr
      changed_when: false

    - name: 'Default | verify | assert TCP BBR enabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_bbr.stdout == 'bbr'  # should be bbr
        fail_msg: >
          sysctl should report net.ipv4.tcp_congestion_control
          ({{ _test_network_tcp_bbr.stdout }}).

    - name: 'Default | verify | get IPv4 forwarding status'
      ansible.builtin.command: 'sysctl --values net.ipv4.ip_forward'
      register: _test_network_tcp_ipv4_forwarding
      changed_when: false

    - name: 'Default | verify | assert IPv4 forwarding disabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_ipv4_forwarding.stdout == '0'
        fail_msg: >
          sysctl should report net.ipv4.ip_forward
          ({{ _test_network_tcp_ipv4_forwarding.stdout }}).

    - name: 'Default | verify | get IPv6 forwarding status'
      ansible.builtin.command: 'sysctl --values net.ipv6.conf.all.forwarding'
      register: _test_network_tcp_ipv6_forwarding
      changed_when: false

    - name: 'Default | verify | assert IPv6 forwarding disabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_ipv6_forwarding.stdout == '0'
        fail_msg: >
          sysctl should report net.ipv6.conf.all.forwarding
          ({{ _test_network_tcp_ipv6_forwarding.stdout }}).

    - name: 'Default | verify | get IPv6 disable status'
      ansible.builtin.command: 'sysctl --values net.ipv6.conf.all.disable_ipv6'
      register: _test_network_tcp_ipv6_disable
      changed_when: false

    - name: 'Default | verify | assert IPv6 disabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_ipv6_disable.stdout == '1'
        fail_msg: >
          sysctl should report net.ipv6.conf.all.disable_ipv6
          ({{ _test_network_tcp_ipv6_disable.stdout }}).

    - name: 'Default | verify | get IPv6 default disable status'
      ansible.builtin.command: 'sysctl --values net.ipv6.conf.default.disable_ipv6'
      register: _test_network_tcp_ipv6_default_disable
      changed_when: false

    - name: 'Default | verify | assert IPv6 default disabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_ipv6_default_disable.stdout == '1'
        fail_msg: >
          sysctl should report net.ipv6.conf.default.disable_ipv6
          ({{ _test_network_tcp_ipv6_default_disable.stdout }}).

    - name: 'Default | verify | get IPv6 lo disable status'
      ansible.builtin.command: 'sysctl --values net.ipv6.conf.lo.disable_ipv6'
      register: _test_network_tcp_ipv6_lo_disable
      changed_when: false

    - name: 'Default | verify | assert IPv6 lo disabled'
      ansible.builtin.assert:
        that:
          - _test_network_tcp_ipv6_lo_disable.stdout == '1'
        fail_msg: >
          sysctl should report net.ipv6.conf.lo.disable_ipv6
          ({{ _test_network_tcp_ipv6_lo_disable.stdout }}).
